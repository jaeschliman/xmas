(in-package :xmas.render-buffer)

(definstr set-color (r g b a)
  (gl:color r g b a))

(definstr draw-rect (x y w h)
  (gl:bind-texture :texture-2d 0)
  (gl:rect x y (+ x w) (+ y h)))

(definstr simple-draw-gl-texture (id w h)
  (gl:bind-texture :texture-2d id)
  (gl:color 1 1 1)
  (let* ((x (- (/ w 2)))
         (y (- (/ h 2)))
         (x2 (+ x w))
         (y2 (+ y h)))
    (gl:with-primitive :quads
      (gl:tex-coord 0  1)
      (gl:vertex    x  y  0)
      (gl:tex-coord 1  1)
      (gl:vertex    x2 y  0)
      (gl:tex-coord 1  0)
      (gl:vertex    x2 y2 0)
      (gl:tex-coord 0  0)
      (gl:vertex    x  y2 0))))

(definstr simple-draw-gl-texture-no-color (id w h)
  (gl:bind-texture :texture-2d id)
  (let* ((x (- (/ w 2)))
         (y (- (/ h 2)))
         (x2 (+ x w))
         (y2 (+ y h)))
    (gl:with-primitive :quads
      (gl:tex-coord 0  1)
      (gl:vertex    x  y  0)
      (gl:tex-coord 1  1)
      (gl:vertex    x2 y  0)
      (gl:tex-coord 1  0)
      (gl:vertex    x2 y2 0)
      (gl:tex-coord 0  0)
      (gl:vertex    x  y2 0))))

(definstr simple-draw-gl-with-tex-coords (id x y w h tx1 ty1 tx2 ty2)
  (gl:bind-texture :texture-2d id)
  (let* ((x (+ x (- (/ w 2))))
         (y (+ y (- (/ h 2))))
         (x2 (+ x w))
         (y2 (+ y h)))
    (gl:with-primitive :quads
      (gl:tex-coord tx1  ty2)
      (gl:vertex    x  y  0)
      (gl:tex-coord tx2  ty2)
      (gl:vertex    x2 y  0)
      (gl:tex-coord tx2  ty1)
      (gl:vertex    x2 y2 0)
      (gl:tex-coord tx1  ty1)
      (gl:vertex    x  y2 0))))

(definstr simple-draw-gl-with-tex-coords-rotated (id x y w h tx1 ty1 tx2 ty2)
  (gl:bind-texture :texture-2d id)
  (rotatef w h)
  (let* ((x (+ x (- (/ w 2))))
         (y (+ y (- (/ h 2))))
         (x2 (+ x w))
         (y2 (+ y h)))
    (gl:with-primitive :quads
      (gl:tex-coord tx1  ty2)
      (gl:vertex    x2 y  0)
      (gl:tex-coord tx2  ty2)
      (gl:vertex    x2 y2 0)
      (gl:tex-coord tx2  ty1)
      (gl:vertex    x  y2 0)
      (gl:tex-coord tx1  ty1)
      (gl:vertex    x  y  0))))

(definstr draw-gl-with-tex-coords (id x y w h tx1 ty1 tx2 ty2)
  (gl:bind-texture :texture-2d id)
  (let* ((x2 (+ x w))
         (y2 (+ y h)))
    (gl:with-primitive :quads
      (gl:tex-coord tx1  ty2)
      (gl:vertex    x  y  0)
      (gl:tex-coord tx2  ty2)
      (gl:vertex    x2 y  0)
      (gl:tex-coord tx2  ty1)
      (gl:vertex    x2 y2 0)
      (gl:tex-coord tx1  ty1)
      (gl:vertex    x  y2 0))))

(definstr draw-gl-with-tex-coords-rotated (id x y w h tx1 ty1 tx2 ty2)
  (gl:bind-texture :texture-2d id)
  (rotatef w h)
  (let* ((x2 (+ x w))
         (y2 (+ y h)))
    (gl:with-primitive :quads
      (gl:tex-coord tx1  ty2)
      (gl:vertex    x2 y  0)
      (gl:tex-coord tx2  ty2)
      (gl:vertex    x2 y2 0)
      (gl:tex-coord tx2  ty1)
      (gl:vertex    x  y2 0)
      (gl:tex-coord tx1  ty1)
      (gl:vertex    x  y  0))))


(definstr push-matrix ()
  (gl:push-matrix))

(definstr pop-matrix ()
  (gl:pop-matrix))

(definstr-vec mult-matrix (vec)
  (cffi:with-foreign-object (matrix '%gl:float 16)
    (let ((i 0))
      (do-vec! (val)
        (setf (cffi:mem-aref matrix '%gl:float i) val)
        (incf i))
      (%gl:mult-matrix-f matrix))))

;; test method for node transforms
;; (definstr-vec mult-matrix-noop (vec)
;;   (cffi:with-foreign-object (matrix '%gl:float 16)
;;     (let ((i 0))
;;       (do-vec! (val)
;;         (setf (cffi:mem-aref matrix '%gl:float i) val)
;;         (incf i))
;;       ;;(%gl:mult-matrix-f matrix)
;;       )))

(definstr translate-scale-rotate (x y sx sy r)
  (gl:translate x y 0.0)
  (gl:scale sx sy 1.0)
  (gl:rotate r 0.0 0.0 1.0))


(definstr translate-scale-rotate-translate (x y sx sy r x2 y2)
  (gl:translate x y 0.0)
  (gl:scale sx sy 1.0)
  (gl:rotate r 0.0 0.0 1.0)
  (gl:translate x2 y2 0.0))
